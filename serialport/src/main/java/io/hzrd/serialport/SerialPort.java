// Automatically generated by flapigen
package io.hzrd.serialport;
import android.support.annotation.NonNull;

public final class SerialPort {

    public SerialPort(@NonNull String path, int baud_rate, int data_bits, int flow_control, int parity, int stop_bits, int timeout) {
        mNativeObj = init(path, baud_rate, data_bits, flow_control, parity, stop_bits, timeout);
    }
    private static native long init(@NonNull String path, int baud_rate, int data_bits, int flow_control, int parity, int stop_bits, int timeout);

    public final boolean open() {
        boolean ret = do_open(mNativeObj);

        return ret;
    }
    private static native boolean do_open(long self);

    public final boolean close() {
        boolean ret = do_close(mNativeObj);

        return ret;
    }
    private static native boolean do_close(long self);

    public final int bytes_to_read() {
        int ret = do_bytes_to_read(mNativeObj);

        return ret;
    }
    private static native int do_bytes_to_read(long self);

    public final int flow_control() {
        int ret = do_flow_control(mNativeObj);

        return ret;
    }
    private static native int do_flow_control(long self);

    public final byte [] read(int length) {
        byte [] ret = do_read(mNativeObj, length);

        return ret;
    }
    private static native byte [] do_read(long self, int length);

    public final byte [] read_exact(int length) {
        byte [] ret = do_read_exact(mNativeObj, length);

        return ret;
    }
    private static native byte [] do_read_exact(long self, int length);

    public final byte [] read_to_eol() {
        byte [] ret = do_read_to_eol(mNativeObj);

        return ret;
    }
    private static native byte [] do_read_to_eol(long self);

    public final boolean read_carrier_detect() {
        boolean ret = do_read_carrier_detect(mNativeObj);

        return ret;
    }
    private static native boolean do_read_carrier_detect(long self);

    public final boolean read_clear_to_send() {
        boolean ret = do_read_clear_to_send(mNativeObj);

        return ret;
    }
    private static native boolean do_read_clear_to_send(long self);

    public final boolean read_data_set_ready() {
        boolean ret = do_read_data_set_ready(mNativeObj);

        return ret;
    }
    private static native boolean do_read_data_set_ready(long self);

    public final boolean read_ring_indicator() {
        boolean ret = do_read_ring_indicator(mNativeObj);

        return ret;
    }
    private static native boolean do_read_ring_indicator(long self);

    public final int write(@NonNull byte [] buf) {
        int ret = do_write(mNativeObj, buf);

        return ret;
    }
    private static native int do_write(long self, byte [] buf);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ SerialPort(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}