use crate::SerialPort;
use jni_sys::*;

// ANCHOR: api
foreign_typemap!(
    ($p:r_type) Vec<i8> <= jbyteArray {
        let jni_arr = JavaByteArray::new(env, $p);
        $out = jni_arr.to_slice().to_vec();
    };
    (f_type, unique_prefix = "/*Vec<i8>*/") <= "/*Vec<i8>*/byte []";
);

foreign_class!(class SerialPort {
    self_type SerialPort;
    constructor SerialPort::new(path: &str, baud_rate: i32, data_bits: i32, flow_control: i32, parity: i32, stop_bits: i32, timeout: i32) -> SerialPort;
    fn SerialPort::open(&mut self) -> bool;
    fn SerialPort::close(&mut self) -> bool;
    fn SerialPort::bytes_to_read(&mut self) -> i32;
    fn SerialPort::flow_control(&mut self) -> i32;
    fn SerialPort::read(&mut self, length: i32) -> Vec<i8>;
    fn SerialPort::read_exact(&mut self, length: i32) -> Vec<i8>;
    fn SerialPort::read_to_eol(&mut self) -> Vec<i8>;
    fn SerialPort::read_carrier_detect(&mut self) -> bool;
    fn SerialPort::read_clear_to_send(&mut self) -> bool;
    fn SerialPort::read_data_set_ready(&mut self) -> bool;
    fn SerialPort::read_ring_indicator(&mut self) -> bool;
    fn SerialPort::write(&mut self, buf: Vec<i8>) -> i32;
});
// ANCHOR_END: api
